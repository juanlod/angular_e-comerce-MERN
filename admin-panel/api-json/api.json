{
  "openapi": "3.0.0",
  "paths": {
    "/api/user/login": {
      "post": {
        "operationId": "loginUser",
        "summary": "Create an User",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The User has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Bad request." }
        },
        "tags": ["User"]
      }
    },
    "/api/user/save": {
      "post": {
        "operationId": "createUser",
        "summary": "Create an User",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "201": { "description": "The User has been successfully created." },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        },
        "tags": ["User"]
      }
    },
    "/api/user/find_all": {
      "get": {
        "operationId": "findAllUser",
        "summary": "Get all Users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all Users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": { "description": "Bad request." }
        },
        "tags": ["User"]
      }
    },
    "/api/user/find_one/{id}": {
      "get": {
        "operationId": "findOneUser",
        "summary": "Get an User by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Return an User.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Bad request." }
        },
        "tags": ["User"]
      }
    },
    "/api/user/update/{id}": {
      "patch": {
        "operationId": "updateUser",
        "summary": "Update an User by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The User has been successfully updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Bad request." }
        },
        "tags": ["User"]
      }
    },
    "/api/user/delete/{id}": {
      "delete": {
        "operationId": "deleteUser",
        "summary": "Delete an User by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "The User has been successfully deleted." },
          "400": { "description": "Bad request." }
        },
        "tags": ["User"]
      }
    },
    "/api/clients/save": {
      "post": {
        "operationId": "createClient",
        "summary": "Create a new client",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Client" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The client has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Client" }
              }
            }
          },
          "400": { "description": "Bad Request." }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/find_all": {
      "get": {
        "operationId": "findAllClient",
        "summary": "Obtener todos los clientes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lista de todos los clientes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Client" }
                }
              }
            }
          }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/find_all/paging": {
      "get": {
        "operationId": "findAllPagingClient",
        "summary": "Obtener clientes paginados",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filtro para buscar clientes",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Número de página",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Número de elementos por página",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de clientes paginados",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Client" }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/find_one/{id}": {
      "get": {
        "operationId": "findOneClient",
        "summary": "Obtener un cliente por id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "El ID del cliente a buscar",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "El cliente ha sido encontrado satisfactoriamente",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Client" }
              }
            }
          },
          "404": { "description": "El cliente no ha sido encontrado" }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/update/{id}": {
      "patch": {
        "operationId": "updateClient",
        "summary": "Actualizar un cliente por id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "El ID del cliente a actualizar",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Client" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "El cliente ha sido actualizado satisfactoriamente"
          },
          "404": { "description": "El cliente no ha sido encontrado" }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/delete/{id}": {
      "delete": {
        "operationId": "removeClient",
        "summary": "Eliminar un cliente por id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "El ID del cliente a eliminar",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "El cliente ha sido eliminado satisfactoriamente"
          },
          "404": { "description": "El cliente no ha sido encontrado" }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/find_by_identif/{identif}": {
      "get": {
        "operationId": "findByIdentifClient",
        "summary": "Find client by identif",
        "parameters": [
          {
            "name": "identif",
            "required": true,
            "in": "path",
            "description": "Client identification number",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "Returns true if client exists, false otherwise",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          }
        },
        "tags": ["Clients"]
      }
    },
    "/api/clients/find_by_email/{email}": {
      "get": {
        "operationId": "findByEmailClient",
        "summary": "Find client by email",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "description": "Client email",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": {
          "200": {
            "description": "Returns true if client exists, false otherwise",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          }
        },
        "tags": ["Clients"]
      }
    },
    "/api/locality/save": {
      "post": {
        "operationId": "createLocality",
        "summary": "Create a new locality",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Locality" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The locality has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Locality" }
              }
            }
          },
          "400": { "description": "The request body is invalid." }
        },
        "tags": ["Locality"]
      }
    },
    "/api/locality/find_all": {
      "get": {
        "operationId": "findAllLocality",
        "summary": "Retrieve a list of all localities",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved all localities successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Locality" }
                }
              }
            }
          }
        },
        "tags": ["Locality"]
      }
    },
    "/api/locality/find_one/{id}": {
      "get": {
        "operationId": "findOneLocality",
        "summary": "Retrieve a locality by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved locality successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Locality" }
              }
            }
          },
          "404": { "description": "Locality not found." }
        },
        "tags": ["Locality"]
      }
    },
    "/api/locality/update/{id}": {
      "patch": {
        "operationId": "updateLocality",
        "summary": "Update a locality by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Locality" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The locality has been successfully updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Locality" }
              }
            }
          },
          "400": { "description": "The request body is invalid." },
          "404": { "description": "Locality not found." }
        },
        "tags": ["Locality"]
      }
    },
    "/api/locality/delete/{id}": {
      "delete": {
        "operationId": "removeLocality",
        "summary": "Remove a locality by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The locality has been successfully removed."
          },
          "404": { "description": "Locality not found." }
        },
        "tags": ["Locality"]
      }
    },
    "/api/locality/find_all/paging": {
      "get": {
        "operationId": "findAllPagingLocality",
        "summary": "Get all localities with pagination",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all localities paginated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Locality" }
                }
              }
            }
          }
        },
        "tags": ["Locality"]
      }
    },
    "/api/province/save": {
      "post": {
        "operationId": "createProvince",
        "summary": "Create a new province",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The province has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Province" }
              }
            }
          },
          "400": { "description": "The request body is invalid." }
        },
        "tags": ["Province"]
      }
    },
    "/api/province/find_all": {
      "get": {
        "operationId": "findAllProvince",
        "summary": "Retrieve a list of all provinces",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved all provinces successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Province" }
                }
              }
            }
          }
        },
        "tags": ["Province"]
      }
    },
    "/api/province/find_one/{id}": {
      "get": {
        "operationId": "findOneProvince",
        "summary": "Retrieve a province by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved province successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Province" }
              }
            }
          },
          "404": { "description": "Province not found." }
        },
        "tags": ["Province"]
      }
    },
    "/api/province/update/{id}": {
      "patch": {
        "operationId": "updateProvince",
        "summary": "Update a province by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Province" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The province has been successfully updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Province" }
              }
            }
          },
          "400": { "description": "The request body is invalid." },
          "404": { "description": "province not found." }
        },
        "tags": ["Province"]
      }
    },
    "/api/province/delete/{id}": {
      "delete": {
        "operationId": "removeProvince",
        "summary": "Remove a province by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The province has been successfully removed."
          },
          "404": { "description": "province not found." }
        },
        "tags": ["Province"]
      }
    },
    "/api/province/find_all/paging": {
      "get": {
        "operationId": "findAllPagingProvince",
        "summary": "Get all provinces with pagination",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all provinces paginated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Province" }
                }
              }
            }
          }
        },
        "tags": ["Province"]
      }
    }
  },
  "info": { "title": "", "description": "", "version": "1.0.0", "contact": {} },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "password": { "type": "string" }
        },
        "required": ["email", "password"]
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "nombres": { "type": "string" },
          "apellidos": { "type": "string" },
          "email": { "type": "string" },
          "password": { "type": "string" },
          "telefono": { "type": "string" },
          "rol": { "type": "string" },
          "f_nacimiento": { "type": "string" },
          "dni": { "type": "string" }
        },
        "required": [
          "_id",
          "nombres",
          "apellidos",
          "email",
          "password",
          "telefono",
          "rol",
          "f_nacimiento",
          "dni"
        ]
      },
      "Client": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "idc": { "type": "number" },
          "ayn": { "type": "string" },
          "dir": { "type": "string" },
          "codp": { "type": "string" },
          "codt": { "type": "string" },
          "tel": { "type": "string" },
          "telC": { "type": "string" },
          "email": { "type": "string" },
          "obs": { "type": "string" },
          "mark": { "type": "number" },
          "feci": { "format": "date-time", "type": "string" },
          "fecu": { "format": "date-time", "type": "string" },
          "motuv": { "type": "string" },
          "deuda": { "type": "boolean" },
          "problematico": { "type": "boolean" },
          "cantidadDeuda": { "type": "string" },
          "obra": { "type": "number" },
          "Loc": { "type": "number" },
          "Dep": { "type": "number" },
          "tel2": { "type": "string" },
          "telC2": { "type": "string" },
          "codt2": { "type": "string" },
          "codp2": { "type": "string" },
          "Identif": { "type": "string" },
          "mascotas": { "type": "array", "items": { "type": "string" } }
        },
        "required": [
          "_id",
          "idc",
          "ayn",
          "dir",
          "codp",
          "codt",
          "tel",
          "telC",
          "email",
          "obs",
          "mark",
          "feci",
          "fecu",
          "motuv",
          "deuda",
          "problematico",
          "cantidadDeuda",
          "obra",
          "Loc",
          "Dep",
          "tel2",
          "telC2",
          "codt2",
          "codp2",
          "Identif",
          "mascotas"
        ]
      },
      "Locality": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "id": { "type": "number" },
          "nom": { "type": "string" },
          "dep": { "type": "number" },
          "cp": { "type": "string" },
          "ran": { "type": "number" }
        },
        "required": ["_id", "id", "nom", "dep", "cp", "ran"]
      },
      "Province": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "id": { "type": "number" },
          "nom": { "type": "string" },
          "Ctel": { "type": "string" },
          "ran": { "type": "number" }
        },
        "required": ["_id", "id", "nom", "Ctel", "ran"]
      }
    }
  }
}
